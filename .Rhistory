a<- 1:20
a
b<- 20:1
b
c<- c(1:20,19:1)
c
tmp<- c(4,6,3)
tmp
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
A<- matrix(c(1,1,3,5,2,6,-2,-1,-3), nrow = 3, ncol = 3,T)
A
A%%A%%A #Q(2a)
m<-makeCacheMatrix(matrix(c(3,7,1,2),2,2))
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
m<-makeCacheMatrix(matrix(c(3,7,1,2),2,2))
cacheSolve(m)
makeCacheMatrix <- function(x = matrix()) {
# Initialize the inverse property
m <- NULL
# Method to set the matrix
set <- function(y) {
x <<- y
m <<- NULL
}
# Method the get the matrix
get <- function()
# Return the matrix
x
# Method to set the inverse of the matrix
setinverse <- function(solve) m <<- solve
# Method to set the inverse of the matrix
getinverse <- function()
# Return the inverse property
m
# Return a list of the methods
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
# The following function computes the inverse of the special "matrix"
# returned by makeCacheMatrix above.
# It first checks if the inverse has already been computed.
# If so, it gets the result and skips the computation.
# If not, it computes the inverse, sets the value in the cache via
# setinverse function.
# This function assumes that the matrix is always invertible.
cacheSolve <- function(x, ...) {
# Return a matrix that is the inverse of 'x'
m <- x$getinverse()
# Just return the inverse if its already set
if(!is.null(m)) {
message("getting cached data")
return(m)
}
# Get the matrix from our object
data <- x$get()
m <- solve(data, ...)
## Set the inverse to the object
x$setinverse(m)
## Return the matrix
m
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
makeCacheMatrix <- function(x = matrix()) {
# Initialize the inverse property
m <- NULL
# Method to set the matrix
set <- function(y) {
x <<- y
m <<- NULL
}
# Method the get the matrix
get <- function()
# Return the matrix
x
# Method to set the inverse of the matrix
setinverse <- function(solve) m <<- solve
# Method to set the inverse of the matrix
getinverse <- function()
# Return the inverse property
m
# Return a list of the methods
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
# Return a matrix that is the inverse of 'x'
m <- x$getinverse()
# Just return the inverse if its already set
if(!is.null(m)) {
message("getting cached data")
return(m)
}
# Get the matrix from our object
data <- x$get()
m <- solve(data, ...)
## Set the inverse to the object
x$setinverse(m)
## Return the matrix
m
}
x <- makeCacheMatrix()
x$setMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) )
x$setinverse( matrix(c(1,2,12,13), nrow = 2, ncol = 2) )
x$getinverse()
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
# Initialize the inverse property
m <- NULL
# Method to set the matrix
set <- function(y) {
x <<- y
m <<- NULL
}
# Method the get the matrix
get <- function()
# Return the matrix
x
# Method to set the inverse of the matrix
setinverse <- function(solve) m <<- solve
# Method to set the inverse of the matrix
getinverse <- function()
# Return the inverse property
m
# Return a list of the methods
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve(x)
m <- x$getinverse()
# Just return the inverse if its already set
if(!is.null(m)) {
message("getting cached data")
return(m)
}
# Get the matrix from our object
data <- x$get()
m <- solve(data, ...)
## Set the inverse to the object
x$setinverse(m)
## Return the matrix
m
}
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
# Initialize the inverse property
m <- NULL
# Method to set the matrix
set <- function(y) {
x <<- y
m <<- NULL
}
# Method the get the matrix
get <- function()
# Return the matrix
x
# Method to set the inverse of the matrix
setinverse <- function(solve) m <<- solve
# Method to set the inverse of the matrix
getinverse <- function()
# Return the inverse property
m
# Return a list of the methods
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
# Return a matrix that is the inverse of 'x'
m <- x$getinverse()
# Just return the inverse if its already set
if(!is.null(m)) {
message("getting cached data")
return(m)
}
# Get the matrix from our object
data <- x$get()
m <- solve(data, ...)
## Set the inverse to the object
x$setinverse(m)
## Return the matrix
m
x <- makeCacheMatrix()
x$setinverse( matrix(c(1,2,12,13), nrow = 2, ncol = 2) )
x$getinverse()
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
# Initialize the inverse property
m <- NULL
# Method to set the matrix
set <- function(y) {
x <<- y
m <<- NULL
}
# Method the get the matrix
get <- function()
# Return the matrix
x
# Method to set the inverse of the matrix
setinverse <- function(solve) m <<- solve
# Method to set the inverse of the matrix
getinverse <- function()
# Return the inverse property
m
# Return a list of the methods
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
# Return a matrix that is the inverse of 'x'
m <- x$getinverse()
# Just return the inverse if its already set
if(!is.null(m)) {
message("getting cached data")
return(m)
}
# Get the matrix from our object
data <- x$get()
m <- solve(data, ...)
## Set the inverse to the object
x$setinverse(m)
## Return the matrix
m
}
x <- makeCacheMatrix()
x$setinverse( matrix(c(1,2,12,13), nrow = 2, ncol = 2) )
x$getinverse()
cacheSolve(x)
cacheSolve(x)
m<-makeCacheMatrix(matrix(c(3,7,1,2),2,2))
cacheSolve(xInv)
cacheSolve(m)
cacheSolve(m)
m<-makeCacheMatrix(matrix(c(1,2,4,7),2,2))
cacheSolve(m)
cacheSolve(m)
